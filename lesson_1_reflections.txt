How did viewing a diff between two versions of a file help you see the bug that was introduced?
Since diff only displays the changes from one version to other, it's easy to debug the changes instead of whole code base.
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
By keeping track of all changes gone into code base, a programmer can debug his code much more efficiently and can revert to any version at any give point of time.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
Pros would be Less versions, so easy to read. Cons would be chance of user error.
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git handles files which might be interrelated, where as Google Docs considers each file to be independent
How can you use the commands git log and git diff to view the history of files?
git log will list all the commits and git diff will give the changes between a commit and its previous commit.
How might using version control make you more confident to make changes that could break something?
With possibility of going back to previous versions with Git, I feel more confident to make changes which might have chance of breaking other code.
Now that you have your workspace set up, what do you want to try using Git for?
To version control my projects
What happens when you initialize a repository? Why do you need to do it?
A Metadata file related to repository gets created, making an existing directory as new repository eligible for version controlling
How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area holds files to be committed, it adds as an extra step to check what needs to be committed to repository